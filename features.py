from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
import random
from datetime import datetime, timedelta
from database import (
    get_user_by_id, update_user_balance, add_xp,
    can_open_case, update_last_open_case_time,
    get_active_vote, add_vote_for_option, has_user_voted,
    get_faq_answer, add_faq_entry, get_user_balance
)
import logging

logger = logging.getLogger(__name__)

async def burn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∂–∏–≥–∞–Ω–∏—è LumeCoin –≤ –æ–±–º–µ–Ω –Ω–∞ XP"""
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    
    if not context.args:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /burn [—Å—É–º–º–∞]')
        return
    
    try:
        amount = int(context.args[0])
        if amount <= 0:
            await update.message.reply_text('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!')
            return
    except ValueError:
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!')
        return
    
    user = get_user_by_id(user_id)
    if not user:
        await update.message.reply_text('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!')
        return
    
    if user['balance'] < amount:
        await update.message.reply_text(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {user["balance"]} LumeCoin')
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º XP (1 LumeCoin = 2 XP)
    xp_gain = amount * 2
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ XP
    update_user_balance(user_id, -amount)
    add_xp(user_id, xp_gain)
    
    await update.message.reply_text(
        f'üî• –í—ã —Å–æ–∂–≥–ª–∏ {amount} LumeCoin –∏ –ø–æ–ª—É—á–∏–ª–∏ {xp_gain} XP!\n'
        f'–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_user_by_id(user_id)["balance"]} LumeCoin\n'
        f'–í–∞—à XP: {get_user_by_id(user_id)["xp"]}'
    )

async def case_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞"""
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    
    user = get_user_by_id(user_id)
    if not user:
        await update.message.reply_text('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å
    if not can_open_case(user_id):
        await update.message.reply_text('–í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ –∫–µ–π—Å –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤!')
        return
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞
    case_cost = 100
    if user['balance'] < case_cost:
        await update.message.reply_text(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞! –°—Ç–æ–∏–º–æ—Å—Ç—å: {case_cost} LumeCoin')
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞
    update_user_balance(user_id, -case_cost)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑
    prizes = [
        {'type': 'coin', 'value': random.randint(50, 200), 'description': 'LumeCoin'},
        {'type': 'xp', 'value': random.randint(50, 300), 'description': 'XP'},
        {'type': 'rare', 'value': '–†–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', 'description': '—Ä–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'}
    ]
    
    # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–∑–∞ (–º–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ —Ä–µ–¥–∫–∏–π –ø—Ä–∏–∑)
    weights = [0.7, 0.25, 0.05]  # 70% –Ω–∞ –º–æ–Ω–µ—Ç—ã, 25% –Ω–∞ XP, 5% –Ω–∞ —Ä–µ–¥–∫–∏–π –ø—Ä–∏–∑
    prize = random.choices(prizes, weights=weights, k=1)[0]
    
    # –í—ã–¥–∞–µ–º –ø—Ä–∏–∑
    if prize['type'] == 'coin':
        update_user_balance(user_id, prize['value'])
        prize_text = f'{prize["value"]} {prize["description"]}'
    elif prize['type'] == 'xp':
        add_xp(user_id, prize['value'])
        prize_text = f'{prize["value"]} {prize["description"]}'
    else:  # rare achievement
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤ –ë–î
        prize_text = f'{prize["value"]}'
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    update_last_open_case_time(user_id)
    
    await update.message.reply_text(
        f'üéÅ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏: {prize_text}!\n'
        f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞ ({case_cost} LumeCoin) –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.'
    )

async def vote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    active_vote = get_active_vote()
    if not active_vote:
        await update.message.reply_text('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.')
        return
    
    vote_id = active_vote['id']
    question = active_vote['question']
    options = active_vote['options']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    if has_user_voted(vote_id, user_id):
        await update.message.reply_text('–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏!')
        return
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    keyboard = []
    for i, option in enumerate(options):
        callback_data = f'vote_{vote_id}_{i}'
        keyboard.append([InlineKeyboardButton(option, callback_data=callback_data)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(question, reply_markup=reply_markup)

async def button_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º callback_data
    data_parts = query.data.split('_')
    if len(data_parts) != 3 or data_parts[0] != 'vote':
        return
    
    vote_id = int(data_parts[1])
    option_index = int(data_parts[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    active_vote = get_active_vote()
    if not active_vote or active_vote['id'] != vote_id:
        await query.edit_message_text('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    if has_user_voted(vote_id, user_id):
        await query.edit_message_text('–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏!')
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
    add_vote_for_option(vote_id, option_index)
    
    await query.edit_message_text(f'‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞: {active_vote["options"][option_index]}')

async def helpme_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç / FAQ"""
    if not context.args:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /helpme [–≤–∞—à –≤–æ–ø—Ä–æ—Å]')
        return
    
    question = ' '.join(context.args)
    
    # –ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ FAQ
    answer = get_faq_answer(question)
    
    if answer:
        await update.message.reply_text(f'üîç –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{answer}')
    else:
        await update.message.reply_text(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        )

async def addfaq_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FAQ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ admin_panel.py –∏–ª–∏ —Å–≤–æ—é –ø—Ä–æ–≤–µ—Ä–∫—É
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    ADMIN_IDS = [370213481]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    
    if len(context.args) < 2:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addfaq [–≤–æ–ø—Ä–æ—Å];[–æ—Ç–≤–µ—Ç]')
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Ö–æ–∂–¥–µ–Ω–∏—é ';'
    full_text = ' '.join(context.args)
    if ';' not in full_text:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addfaq [–≤–æ–ø—Ä–æ—Å];[–æ—Ç–≤–µ—Ç]')
        return
    
    separator_index = full_text.find(';')
    question = full_text[:separator_index].strip()
    answer = full_text[separator_index + 1:].strip()
    
    if not question or not answer:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addfaq [–≤–æ–ø—Ä–æ—Å];[–æ—Ç–≤–µ—Ç]')
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ FAQ
    add_faq_entry(question, answer)
    
    await update.message.reply_text('‚úÖ –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ FAQ.')



def register_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler('burn', burn_command))
    application.add_handler(CommandHandler('case', case_command))
    application.add_handler(CommandHandler('vote', vote_command))
    application.add_handler(CallbackQueryHandler(button_vote, pattern='^vote_'))
    application.add_handler(CommandHandler('helpme', helpme_command))
    application.add_handler(CommandHandler('addfaq', addfaq_command))