import asyncio
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters, CommandHandler
from database import add_xp, get_user_profile, get_user_achievements, grant_achievement

def group_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.
    """
    from functools import wraps
    @wraps(func)
    async def wrapper(update, context):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from database import get_bound_supergroup_id
        
        chat_id = update.effective_chat.id
        bound_supergroup_id = get_bound_supergroup_id()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç - —ç—Ç–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
        if update.effective_chat.type not in ['group', 'supergroup'] or chat_id != bound_supergroup_id:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
        
        return await func(update, context)
    return wrapper

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
XP_PER_MESSAGE = 10
XP_LEVEL_THRESHOLD = 500  # –û–ø—ã—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è (–±–∞–∑–æ–≤—ã–π)
COOLDOWN_SECONDS = 60 # –ö—É–ª–¥–∞—É–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏ XP –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
last_xp_time = {}

# –°–ª–æ–≤–∞—Ä—å –∑–≤–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
LEVEL_TITLES = {
    (1, 5): "–ù–æ–≤–∏—á–æ–∫",
    (6, 10): "–ü–∞—Ä–∏–ª—å—â–∏–∫",
    (11, 20): "–ó–Ω–∞—Ç–æ–∫ –í–µ–π–ø–∞",
    (21, 30): "–ú–∞–≥ –í–µ–π–ø–∞",
    (31, 40): "–í–ª–∞–¥—ã–∫–∞ –ö–∞—Ä—Ç—Ä–∏–¥–∂–∞",
    (41, 50): "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä –û–±–ª–∞–∫",
    (51, 100): "–ë–æ–≥ –í–µ–π–ø–∏–Ω–≥–∞"
}

# –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = {
    "first_message": {"name": "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "condition": lambda user_data: user_data['messages_sent'] >= 1},
    "level_5": {"name": "–î–æ—Å—Ç–∏–≥ 5 —É—Ä–æ–≤–Ω—è", "condition": lambda user_data: user_data['level'] >= 5},
    "level_10": {"name": "–î–æ—Å—Ç–∏–≥ 10 —É—Ä–æ–≤–Ω—è", "condition": lambda user_data: user_data['level'] >= 10},
    "play_10_games": {"name": "–°—ã–≥—Ä–∞–ª –≤ 10 –∏–≥—Ä", "condition": lambda user_data: user_data['games_played'] >= 10},
    "play_50_games": {"name": "–°—ã–≥—Ä–∞–ª –≤ 50 –∏–≥—Ä", "condition": lambda user_data: user_data['games_played'] >= 50},
    "first_win": {"name": "–ü–µ—Ä–≤—ã–π –≤—ã–∏–≥—Ä—ã—à", "condition": lambda user_data: user_data['games_won'] >= 1},
    "top_10": {"name": "–í —Ç–æ–ø-10", "condition": lambda user_data: user_data['is_top_10']},
    "loyal_member": {"name": "–ó–∞–≤—Å–µ–≥–¥–∞—Ç–∞–π", "condition": lambda user_data: user_data['days_active'] >= 7}
}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    chat_id = update.effective_chat.id
    from database import get_bound_supergroup_id
    bound_supergroup_id = get_bound_supergroup_id()
    
    if update.effective_chat.type not in ['group', 'supergroup'] or chat_id != bound_supergroup_id:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –∏–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    current_time = asyncio.get_event_loop().time()
    if user_id in last_xp_time:
        time_since_last_xp = current_time - last_xp_time[user_id]
        if time_since_last_xp < COOLDOWN_SECONDS:
            return  # –ù–µ –Ω–∞—á–∏—Å–ª—è–µ–º XP, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
    
    # –ù–∞—á–∏—Å–ª—è–µ–º XP
    new_level, new_xp = add_xp(user_id, XP_PER_MESSAGE)
    last_xp_time[user_id] = current_time
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'messages_sent' not in context.user_data:
        context.user_data['messages_sent'] = 0
    context.user_data['messages_sent'] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    await check_achievements(update, context, user_id, new_level)

async def check_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, current_level: int):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    level, xp, balance = get_user_profile(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
    user_data = {
        'level': current_level,
        'messages_sent': context.user_data.get('messages_sent', 0),
        'games_played': context.user_data.get('games_played', 0),
        'games_won': context.user_data.get('games_won', 0),
        'is_top_10': False,  # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        'days_active': context.user_data.get('days_active', 0)
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    for achievement_id, achievement_info in ACHIEVEMENTS.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        user_achievements = get_user_achievements(user_id)
        if achievement_id not in user_achievements:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if achievement_info['condition'](user_data):
                # –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                grant_achievement(user_id, achievement_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement_info['name']}!"
                )

def get_level_title(level: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    """
    for (min_level, max_level), title in LEVEL_TITLES.items():
        if min_level <= level <= max_level:
            return title
    return "–õ–µ–≥–µ–Ω–¥–∞"

def format_xp_progress(level: int, xp: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å XP –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    """
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π XP –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    max_xp_for_level = level * XP_LEVEL_THRESHOLD
    progress = min(int((xp / max_xp_for_level) * 10), 10)  # –û—Ç 0 –¥–æ 10
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = "‚ñà" * progress + "‚ñë" * (10 - progress)
    
    return f"[{progress_bar}] {xp}/{max_xp_for_level} XP"

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /profile –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    level, xp, balance = get_user_profile(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievements = get_user_achievements(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–≤–∞–Ω–∏–µ
    title = get_level_title(level)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å XP
    xp_progress = format_xp_progress(level, xp)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile_message = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.full_name}\n\n"
    profile_message += f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {level} ({title})\n"
    profile_message += f"üìä –û–ø—ã—Ç: {xp_progress}\n"
    profile_message += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} LumeCoin\n\n"
    
    if achievements:
        profile_message += "üéñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        for achievement_id in achievements:
            achievement_name = ACHIEVEMENTS.get(achievement_id, {}).get('name', achievement_id)
            profile_message += f"‚Ä¢ {achievement_name}\n"
    else:
        profile_message += "üéñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: –ø–æ–∫–∞ –Ω–µ—Ç"
    
    await update.message.reply_text(profile_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ main.py
xp_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
profile_handler = CommandHandler('profile', profile)