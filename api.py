from flask import Flask, request, jsonify
from functools import wraps
import hashlib
import hmac
import os
from database import (
    get_user_balance, update_user_balance, get_user_profile, 
    get_user_achievements, get_referral_count, add_xp,
    get_referrer_id, get_referral_reward_status, mark_referral_reward_as_claimed,
    add_referral, get_user_by_id, can_open_case, update_last_open_case_time
)
from games import roulette, play, russian, jewish, dice, slots
from titles import PERMANENT_TITLES, TEMPORARY_TITLES
from referrals import ref_command
import random
from datetime import datetime
from telegram.ext import ContextTypes
from telegram import Update

app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8490576810:AAF-wMqonWDLERDi_Wv4r95UYCHt74xWQtQ')

def validate_telegram_webapp_data(data: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–∞—Ä—ã –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ
    pairs = data.split('&')
    parsed_data = {}
    for pair in pairs:
        key, value = pair.split('=', 1)
        parsed_data[key] = value
    
    # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    received_hash = parsed_data.get('hash', '')
    
    # –£–¥–∞–ª—è–µ–º hash –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_data = {k: v for k, v in parsed_data.items() if k != 'hash'}
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–∞–º
    data_check_string = '\n'.join([f'{k}={v}' for k, v in sorted(check_data.items())])
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret_key = hashlib.sha256(BOT_TOKEN.encode()).digest()
    
    # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –¥–∞–Ω–Ω—ã—Ö
    calculated_hash = hmac.new(
        secret_key,
        data_check_string.encode(),
        hashlib.sha256
    ).hexdigest()
    
    return calculated_hash == received_hash

def verify_webapp_init_data(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ initData –æ—Ç Telegram WebApp
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        if request.method == 'POST':
            data = request.get_json()
            if not data or 'initData' not in data:
                return jsonify({'success': False, 'message': 'No initData provided'}), 400
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å initData
            if not validate_telegram_webapp_data(data['initData']):
                return jsonify({'success': False, 'message': 'Invalid initData signature'}), 401
        
        return func(*args, **kwargs)
    
    return wrapper

def get_user_id_from_init_data(init_data: str) -> int:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ initData
    """
    pairs = init_data.split('&')
    for pair in pairs:
        key, value = pair.split('=', 1)
        if key == 'user':
            import json
            user_data = json.loads(value)
            return int(user_data['id'])
    return None

@app.route('/api/user', methods=['POST'])
@verify_webapp_init_data
def get_user_data():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –±–∞–ª–∞–Ω—Å, —É—Ä–æ–≤–µ–Ω—å, XP, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ç.–¥.
    """
    data = request.get_json()
    user_id = get_user_id_from_init_data(data['initData'])
    
    if not user_id:
        return jsonify({'success': False, 'message': 'Could not extract user ID'}), 400
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    profile = get_user_profile(user_id)
    level, xp, balance = profile
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π XP –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    xp_needed = level * 500
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    achievements = get_user_achievements(user_id)
    achievement_list = []
    for achievement_id in achievements:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        achievement_list.append({
            'id': achievement_id,
            'name': achievement_id,  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            'icon': 'üèÜ'  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫–∏
        })
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    referral_count = get_referral_count(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot_username = 'vapelumebot'  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ –∏–∑ API Telegram
    referral_link = f'https://t.me/{bot_username}?start=ref{user_id}'
    
    return jsonify({
        'success': True,
        'data': {
            'balance': balance,
            'level': level,
            'xp': xp,
            'xp_needed': xp_needed,
            'rank': get_rank_by_level(level),
            'achievements': achievement_list,
            'referral_link': referral_link,
            'referral_count': referral_count
        }
    })

def get_rank_by_level(level: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
    """
    if level < 5:
        return "–ù–æ–≤–∏—á–æ–∫"
    elif level < 10:
        return "–ü–∞—Ä–∏–ª—å—â–∏–∫"
    elif level < 20:
        return "–ú–∞—Å—Ç–µ—Ä –∏—Å–ø–∞—Ä–µ–Ω–∏—è"
    elif level < 30:
        return "–í–ª–∞–¥—ã–∫–∞ –Ω–∏–∫–æ—Ç–∏–Ω–∞"
    elif level < 50:
        return "–ö–æ—Ä–æ–ª—å –∏—Å–ø–∞—Ä–µ–Ω–∏–π"
    else:
        return "–õ–µ–≥–µ–Ω–¥–∞ VapeLume"

@app.route('/api/game/<game_type>', methods=['POST'])
@verify_webapp_init_data
def play_game(game_type):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    data = request.get_json()
    user_id = get_user_id_from_init_data(data['initData'])
    
    if not user_id:
        return jsonify({'success': False, 'message': 'Could not extract user ID'}), 400
    
    bet = data.get('bet', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if game_type not in ['roulette', 'play', 'russian', 'jewish', 'dice', 'slots']:
        return jsonify({'success': False, 'message': 'Invalid game type'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = get_user_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–≥—Ä
    if game_type in ['roulette'] and bet < 25:
        return jsonify({'success': False, 'message': 'Minimum bet for roulette is 25 LumeCoin'}), 400
    elif game_type in ['dice'] and (bet < 10 or bet > 100):
        return jsonify({'success': False, 'message': 'Bet for dice must be between 10 and 100 LumeCoin'}), 400
    elif game_type in ['slots'] and bet < 50:
        return jsonify({'success': False, 'message': 'Minimum bet for slots is 50 LumeCoin'}), 400
    elif game_type in ['play'] and bet != 25:
        # –î–ª—è –∏–≥—Ä—ã play —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 25
        bet = 25
    
    if game_type not in ['russian', 'jewish'] and balance < bet:
        return jsonify({'success': False, 'message': 'Insufficient balance'}), 400
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–≥—Ä—É
    if game_type == 'roulette':
        return handle_roulette_game(user_id, bet)
    elif game_type == 'play':
        return handle_play_game(user_id)
    elif game_type == 'russian':
        return handle_russian_game(user_id)
    elif game_type == 'jewish':
        return handle_jewish_game(user_id)
    elif game_type == 'dice':
        return handle_dice_game(user_id, bet)
    elif game_type == 'slots':
        return handle_slots_game(user_id, bet)

def handle_roulette_game(user_id: int, bet: float):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É
    """
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_balance(user_id, -bet)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (30% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)
    import random
    result = random.choices(['win', 'lose'], weights=[30, 70])[0]
    
    if result == 'win':
        # –í—ã–∏–≥—Ä—ã—à (x2)
        win_amount = bet * 2
        update_user_balance(user_id, win_amount)
        winnings = win_amount
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        winnings = 0
    
    new_balance = get_user_balance(user_id)
    
    return jsonify({
        'success': True,
        'winnings': winnings,
        'new_balance': new_balance
    })

def handle_play_game(user_id: int):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 25)
    """
    bet = 25
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_balance(user_id, -bet)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (40% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)
    import random
    result = random.choices(['win', 'lose'], weights=[40, 60])[0]
    
    if result == 'win':
        # –í—ã–∏–≥—Ä—ã—à 40 LumeCoin
        win_amount = 40
        update_user_balance(user_id, win_amount)
        winnings = win_amount
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        winnings = 0
    
    new_balance = get_user_balance(user_id)
    
    return jsonify({
        'success': True,
        'winnings': winnings,
        'new_balance': new_balance
    })

def handle_russian_game(user_id: int):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, 35% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (35% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)
    import random
    result = random.choices(['win', 'lose'], weights=[35, 65])[0]
    
    if result == 'win':
        # –í—ã–∏–≥—Ä—ã—à 35 LumeCoin
        win_amount = 35
        update_user_balance(user_id, win_amount)
        winnings = win_amount
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        winnings = 0
    
    new_balance = get_user_balance(user_id)
    
    return jsonify({
        'success': True,
        'winnings': winnings,
        'new_balance': new_balance
    })

def handle_jewish_game(user_id: int):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–≤—Ä–µ–π—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, 50% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (50% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)
    import random
    result = random.choices(['win', 'lose'], weights=[50, 50])[0]
    
    if result == 'win':
        # –í—ã–∏–≥—Ä—ã—à 25 LumeCoin
        win_amount = 25
        update_user_balance(user_id, win_amount)
        winnings = win_amount
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à 35 LumeCoin –∏–ª–∏ –≤—Å—ë, —á—Ç–æ –µ—Å—Ç—å
        balance = get_user_balance(user_id)
        loss_amount = min(35, balance)
        update_user_balance(user_id, -loss_amount)
        winnings = -loss_amount
    
    new_balance = get_user_balance(user_id)
    
    return jsonify({
        'success': True,
        'winnings': abs(winnings) if winnings >= 0 else -abs(winnings),
        'new_balance': new_balance
    })

def handle_dice_game(user_id: int, bet: float):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏ —Å Telegram-–∞–Ω–∏–º–∞—Ü–∏–µ–π
    """
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_balance(user_id, -bet)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ (1-6)
    import random
    dice_value = random.randint(1, 6)
    
    if dice_value >= 4:
        # –í—ã–∏–≥—Ä—ã—à x1.5
        win_amount = bet * 1.5
        update_user_balance(user_id, win_amount)
        winnings = win_amount
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        winnings = 0
    
    new_balance = get_user_balance(user_id)
    
    return jsonify({
        'success': True,
        'winnings': winnings,
        'new_balance': new_balance
    })

def handle_slots_game(user_id: int, bet: float):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã
    """
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_balance(user_id, -bet)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ—Ç–æ–≤ (1-64)
    import random
    dice_value = random.randint(1, 64)
    
    if dice_value == 1:
        # –î–∂–µ–∫–ø–æ—Ç - 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        win_amount = bet * 5
        update_user_balance(user_id, win_amount)
        winnings = win_amount
    elif 2 <= dice_value <= 7:
        # 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        win_amount = bet * 2
        update_user_balance(user_id, win_amount)
        winnings = win_amount
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        winnings = 0
    
    new_balance = get_user_balance(user_id)
    
    return jsonify({
        'success': True,
        'winnings': winnings,
        'new_balance': new_balance
    })

@app.route('/api/title/buy', methods=['POST'])
@verify_webapp_init_data
def buy_title():
    """
    –ü–æ–∫—É–ø–∫–∞ –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞ —Ç–∏—Ç—É–ª–∞
    """
    data = request.get_json()
    user_id = get_user_id_from_init_data(data['initData'])
    
    if not user_id:
        return jsonify({'success': False, 'message': 'Could not extract user ID'}), 400
    
    title = data.get('title')
    title_type = data.get('type', 'permanent')  # 'permanent' –∏–ª–∏ 'temporary'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∏—Ç—É–ª
    if title_type == 'permanent':
        if title not in PERMANENT_TITLES:
            return jsonify({'success': False, 'message': 'Invalid permanent title'}), 400
        price = PERMANENT_TITLES[title]
    else:
        if title not in TEMPORARY_TITLES:
            return jsonify({'success': False, 'message': 'Invalid temporary title'}), 400
        price = TEMPORARY_TITLES[title]['price']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = get_user_balance(user_id)
    if balance < price:
        return jsonify({'success': False, 'message': 'Insufficient balance'}), 400
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    update_user_balance(user_id, -price)
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã:
    # 1. –í—ã–∑–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ titles.py
    # 2. –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∏—Ç—É–ª –≤ —á–∞—Ç–µ
    
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return jsonify({
        'success': True,
        'message': f'Successfully purchased title: {title}'
    })

@app.route('/api/case/open', methods=['POST'])
@verify_webapp_init_data
def open_case():
    """
    –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
    """
    data = request.get_json()
    user_id = get_user_id_from_init_data(data['initData'])
    
    if not user_id:
        return jsonify({'success': False, 'message': 'Could not extract user ID'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å
    if not can_open_case(user_id):
        return jsonify({'success': False, 'message': 'You already opened a case in the last 24 hours'}), 400
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞
    case_cost = 10  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–π
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = get_user_balance(user_id)
    if balance < case_cost:
        return jsonify({'success': False, 'message': 'Insufficient balance to open case'}), 400
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞
    update_user_balance(user_id, -case_cost)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑
    prizes = [
        {'type': 'coin', 'value': random.randint(50, 200), 'description': 'LumeCoin'},
        {'type': 'xp', 'value': random.randint(50, 300), 'description': 'XP'},
        {'type': 'rare', 'value': '–†–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', 'description': '—Ä–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'}
    ]
    
    # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–∑–∞ (–º–µ–Ω—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ —Ä–µ–¥–∫–∏–π –ø—Ä–∏–∑)
    weights = [0.7, 0.25, 0.05]  # 70% –Ω–∞ –º–æ–Ω–µ—Ç—ã, 25% –Ω–∞ XP, 5% –Ω–∞ —Ä–µ–¥–∫–∏–π –ø—Ä–∏–∑
    prize = random.choices(prizes, weights=weights, k=1)[0]
    
    # –í—ã–¥–∞–µ–º –ø—Ä–∏–∑
    if prize['type'] == 'coin':
        update_user_balance(user_id, prize['value'])
        reward = f'{prize["value"]} {prize["description"]}'
    elif prize['type'] == 'xp':
        add_xp(user_id, prize['value'])
        reward = f'{prize["value"]} {prize["description"]}'
    else:  # rare achievement
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤ –ë–î
        reward = f'{prize["value"]}'
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    update_last_open_case_time(user_id)
    
    return jsonify({
        'success': True,
        'reward': reward
    })

@app.route('/api/burn', methods=['POST'])
@verify_webapp_init_data
def burn_coins():
    """
    –°–∂–∏–≥–∞–Ω–∏–µ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XP
    """
    data = request.get_json()
    user_id = get_user_id_from_init_data(data['initData'])
    
    if not user_id:
        return jsonify({'success': False, 'message': 'Could not extract user ID'}), 400
    
    amount = data.get('amount', 0)
    
    if amount <= 0:
        return jsonify({'success': False, 'message': 'Invalid amount'}), 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = get_user_balance(user_id)
    if balance < amount:
        return jsonify({'success': False, 'message': 'Insufficient balance'}), 400
    
    # –°–∂–∏–≥–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –Ω–∞—á–∏—Å–ª—è–µ–º XP (1:2)
    update_user_balance(user_id, -amount)
    xp_gained = amount * 2
    add_xp(user_id, int(xp_gained))
    
    return jsonify({
        'success': True,
        'xp_gained': int(xp_gained)
    })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)