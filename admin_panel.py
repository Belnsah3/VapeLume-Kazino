from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputTextMessageContent, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from database import get_total_users_count, get_active_users_today_count, get_total_currency_in_system, get_user_profile, get_user_balance, update_user_balance, ban_user, give_coins_to_all_users, reset_user_balance, get_game_setting, set_game_setting, get_all_user_ids
import logging

def admin_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    """
    from functools import wraps
    @wraps(func)
    async def wrapper(update, context):
        user_id = update.effective_user.id
        from database import get_all_admin_ids
        admin_ids = get_all_admin_ids()
        from main import OWNER_ID
        
        if user_id == OWNER_ID or user_id in admin_ids:
            return await func(update, context)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            return
    return wrapper


def private_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ.
    """
    from functools import wraps
    @wraps(func)
    async def wrapper(update, context):
        if update.effective_chat.type != 'private':
            return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
        return await func(update, context)
    return wrapper

logger = logging.getLogger(__name__)

@admin_only
@private_only
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = [
        [InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats')],
        [InlineKeyboardButton('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data='admin_users')],
        [InlineKeyboardButton('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–æ–π', callback_data='admin_eco')],
        [InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä', callback_data='admin_games')],
        [InlineKeyboardButton('üéâ –°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç', callback_data='admin_event')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup=reply_markup)


async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'admin_main':
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats')],
            [InlineKeyboardButton('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data='admin_users')],
            [InlineKeyboardButton('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–æ–π', callback_data='admin_eco')],
            [InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä', callback_data='admin_games')],
            [InlineKeyboardButton('üéâ –°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç', callback_data='admin_event')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup=reply_markup)
    
    elif data == 'admin_stats':
        # –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        keyboard = [
            [InlineKeyboardButton('–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='admin_stats_users_total')],
            [InlineKeyboardButton('–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è', callback_data='admin_stats_users_active')],
            [InlineKeyboardButton('–û–±—â–∞—è —Å—É–º–º–∞ LumeCoin –≤ —Å–∏—Å—Ç–µ–º–µ', callback_data='admin_stats_currency_total')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', reply_markup=reply_markup)
    
    elif data.startswith('admin_stats_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if data == 'admin_stats_users_total':
            count = get_total_users_count()
            await query.edit_message_text(f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}')
        elif data == 'admin_stats_users_active':
            count = get_active_users_today_count()
            await query.edit_message_text(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {count}')
        elif data == 'admin_stats_currency_total':
            total = get_total_currency_in_system()
            await query.edit_message_text(f'–û–±—â–∞—è —Å—É–º–º–∞ LumeCoin –≤ —Å–∏—Å—Ç–µ–º–µ: {total}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        keyboard = [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_stats')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_reply_markup(reply_markup=reply_markup)
    
    elif data == 'admin_users':
        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        keyboard = [
            [InlineKeyboardButton('üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='admin_users_search')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', reply_markup=reply_markup)
    
    elif data == 'admin_users_search':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['waiting_for_user_id'] = True
    
    elif data.startswith('admin_user_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        parts = data.split('_')
        if len(parts) >= 3:
            user_id = int(parts[2])
            action = parts[3] if len(parts) > 3 else None
            
            if action == 'give_coins':
                await query.edit_message_text(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}:')
                context.user_data['waiting_for_coin_amount'] = {'user_id': user_id, 'action': 'give'}
            elif action == 'take_coins':
                await query.edit_message_text(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –∏–∑—ä—è—Ç–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:')
                context.user_data['waiting_for_coin_amount'] = {'user_id': user_id, 'action': 'take'}
            elif action == 'ban':
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ban_user(user_id)
                await query.edit_message_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                keyboard = [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'admin_users_info_{user_id}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_reply_markup(reply_markup=reply_markup)
    
    elif data == 'admin_eco':
        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–æ–Ω–æ–º–∏–∫–æ–π
        keyboard = [
            [InlineKeyboardButton('üí∞ –í—ã–¥–∞—Ç—å LumeCoin –≤—Å–µ–º', callback_data='admin_eco_give_all')],
            [InlineKeyboardButton('üí∏ –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='admin_eco_reset_user')],
            [InlineKeyboardButton('üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏', callback_data='admin_titles')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–æ–π:', reply_markup=reply_markup)
    
    elif data == 'admin_eco_give_all':
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –º–æ–Ω–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        keyboard = [
            [InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='admin_eco_give_all_confirm')],
            [InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='admin_eco')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å LumeCoin –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?', reply_markup=reply_markup)
    
    elif data == 'admin_eco_give_all_confirm':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É LumeCoin –¥–ª—è –≤—ã–¥–∞—á–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:')
        context.user_data['waiting_for_bulk_coin_amount'] = True
    
    elif data == 'admin_eco_reset_user':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:')
        context.user_data['waiting_for_reset_user_id'] = True
    
    elif data == 'admin_games':
        # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä
        keyboard = [
            [InlineKeyboardButton('üé∞ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ', callback_data='admin_games_roulette_chance')],
            [InlineKeyboardButton('üé≤ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ /play', callback_data='admin_games_play_chance')],
            [InlineKeyboardButton('üî´ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ', callback_data='admin_games_russian_chance')],
            [InlineKeyboardButton('‚ú°Ô∏è –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –µ–≤—Ä–µ–π—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ', callback_data='admin_games_jewish_chance')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä:', reply_markup=reply_markup)
    
    elif data.startswith('admin_games_roulette_chance'):
        # –¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ
        current_chance = get_game_setting('roulette_win_chance', '30')
        await query.edit_message_text(f'–¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ: {current_chance}%\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0-100):')
        context.user_data['waiting_for_game_setting'] = {'setting': 'roulette_win_chance', 'callback_data': 'admin_games_roulette_chance'}
    
    elif data.startswith('admin_games_play_chance'):
        # –¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ /play
        current_chance = get_game_setting('play_win_chance', '40')
        await query.edit_message_text(f'–¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ /play: {current_chance}%\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0-100):')
        context.user_data['waiting_for_game_setting'] = {'setting': 'play_win_chance', 'callback_data': 'admin_games_play_chance'}
    
    elif data.startswith('admin_games_russian_chance'):
        # –¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ
        current_chance = get_game_setting('russian_win_chance', '35')
        await query.edit_message_text(f'–¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ: {current_chance}%\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0-100):')
        context.user_data['waiting_for_game_setting'] = {'setting': 'russian_win_chance', 'callback_data': 'admin_games_russian_chance'}
    
    elif data.startswith('admin_games_jewish_chance'):
        # –¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –µ–≤—Ä–µ–π—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ
        current_chance = get_game_setting('jewish_win_chance', '50')
        await query.edit_message_text(f'–¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –µ–≤—Ä–µ–π—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ: {current_chance}%\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0-100):')
        context.user_data['waiting_for_game_setting'] = {'setting': 'jewish_win_chance', 'callback_data': 'admin_games_jewish_chance'}
    
    elif data == 'admin_titles':
        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏
        keyboard = [
            [InlineKeyboardButton('üè∑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ç–∏—Ç—É–ª—ã', callback_data='admin_titles_permanent')],
            [InlineKeyboardButton('üïê –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏—Ç—É–ª—ã', callback_data='admin_titles_temporary')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏:', reply_markup=reply_markup)
    
    elif data.startswith('admin_titles_permanent'):
        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ —Ç–∏—Ç—É–ª–∞–º–∏
        from titles import PERMANENT_TITLES
        keyboard = []
        for title, price in PERMANENT_TITLES.items():
            keyboard.append([InlineKeyboardButton(f'{title} - {price} LumeCoin', callback_data=f'admin_title_edit_{title}')])
        keyboard.append([InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ç—É–ª', callback_data='admin_title_add_permanent')])
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_titles')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ —Ç–∏—Ç—É–ª–∞–º–∏:', reply_markup=reply_markup)
    
    elif data.startswith('admin_titles_temporary'):
        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–∏—Ç—É–ª–∞–º–∏
        from titles import TEMPORARY_TITLES
        keyboard = []
        for title, info in TEMPORARY_TITLES.items():
            keyboard.append([InlineKeyboardButton(f'{title} - {info["price"]} LumeCoin', callback_data=f'admin_title_edit_{title}')])
        keyboard.append([InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏—Ç—É–ª', callback_data='admin_title_add_temporary')])
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_titles')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text('üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–∏—Ç—É–ª–∞–º–∏:', reply_markup=reply_markup)
    
    elif data.startswith('admin_title_edit_'):
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞
        title = data.split('_', 3)[3]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞
        from titles import PERMANENT_TITLES, TEMPORARY_TITLES
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏—Ç—É–ª –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º
        is_permanent = title in PERMANENT_TITLES
        if is_permanent:
            current_price = PERMANENT_TITLES[title]
        else:
            # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ TEMPORARY_TITLES
            if title in TEMPORARY_TITLES:
                current_price = TEMPORARY_TITLES[title]['price']
            else:
                # –ï—Å–ª–∏ —Ç–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
                await query.edit_message_text('‚ùå –¢–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                return
        
        await query.edit_message_text(f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ç–∏—Ç—É–ª–∞ "{title}": {current_price} LumeCoin\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:')
        context.user_data['waiting_for_title_price'] = {'title': title, 'is_permanent': is_permanent}
    
    elif data == 'admin_title_add_permanent':
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞:')
        context.user_data['waiting_for_new_title_name'] = {'type': 'permanent'}
    
    elif data == 'admin_title_add_temporary':
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞:')
        context.user_data['waiting_for_new_title_name'] = {'type': 'temporary'}
    
    elif data == 'admin_event':
        # –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:')
        context.user_data['waiting_for_event_message'] = True


async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—É–º–º—ã –º–æ–Ω–µ—Ç)"""
    if 'waiting_for_user_id' in context.user_data and context.user_data['waiting_for_user_id']:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_id = int(update.message.text)
            context.user_data['waiting_for_user_id'] = False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            level, xp, balance = get_user_profile(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}:\n'
            user_info += f'–£—Ä–æ–≤–µ–Ω—å: {level}\n'
            user_info += f'–û–ø—ã—Ç: {xp}\n'
            user_info += f'–ë–∞–ª–∞–Ω—Å: {balance} LumeCoin\n'
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = [
                [InlineKeyboardButton('üí∞ –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã', callback_data=f'admin_user_{user_id}_give_coins')],
                [InlineKeyboardButton('üí∏ –ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã', callback_data=f'admin_user_{user_id}_take_coins')],
                [InlineKeyboardButton('üö´ –í—ã–¥–∞—Ç—å –±–∞–Ω', callback_data=f'admin_user_{user_id}_ban')],
                [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_users')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(user_info, reply_markup=reply_markup)
            
        except ValueError:
            await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
    
    elif 'waiting_for_coin_amount' in context.user_data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –º–æ–Ω–µ—Ç
        try:
            amount = float(update.message.text)
            user_data = context.user_data['waiting_for_coin_amount']
            user_id = user_data['user_id']
            action = user_data['action']
            
            if action == 'give':
                # –í—ã–¥–∞–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                update_user_balance(user_id, amount)
                await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–æ {amount} LumeCoin')
            elif action == 'take':
                # –ò–∑—ã–º–∞–µ–º –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
                update_user_balance(user_id, -amount)
                await update.message.reply_text(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑—ä—è—Ç–æ {amount} LumeCoin')
            
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            del context.user_data['waiting_for_coin_amount']
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            level, xp, balance = get_user_profile(user_id)
            user_info = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}:\n'
            user_info += f'–£—Ä–æ–≤–µ–Ω—å: {level}\n'
            user_info += f'–û–ø—ã—Ç: {xp}\n'
            user_info += f'–ë–∞–ª–∞–Ω—Å: {balance} LumeCoin\n'
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = [
                [InlineKeyboardButton('üí∞ –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã', callback_data=f'admin_user_{user_id}_give_coins')],
                [InlineKeyboardButton('üí∏ –ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã', callback_data=f'admin_user_{user_id}_take_coins')],
                [InlineKeyboardButton('üö´ –í—ã–¥–∞—Ç—å –±–∞–Ω', callback_data=f'admin_user_{user_id}_ban')],
                [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_users')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(user_info, reply_markup=reply_markup)
            
        except ValueError:
            await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
    
    elif 'waiting_for_bulk_coin_amount' in context.user_data and context.user_data['waiting_for_bulk_coin_amount']:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        try:
            amount = float(update.message.text)
            context.user_data['waiting_for_bulk_coin_amount'] = False
            
            # –í—ã–¥–∞–µ–º –º–æ–Ω–µ—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            give_coins_to_all_users(amount)
            await update.message.reply_text(f'–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–¥–∞–Ω–æ {amount} LumeCoin')
            
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            del context.user_data['waiting_for_bulk_coin_amount']
            
        except ValueError:
            await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
    
    elif 'waiting_for_reset_user_id' in context.user_data and context.user_data['waiting_for_reset_user_id']:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        try:
            user_id = int(update.message.text)
            context.user_data['waiting_for_reset_user_id'] = False
            
            # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reset_user_balance(user_id)
            await update.message.reply_text(f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω')
            
        except ValueError:
            await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.')
    
    elif 'waiting_for_game_setting' in context.user_data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        try:
            value = float(update.message.text)
            if 0 <= value <= 100:
                setting_data = context.user_data['waiting_for_game_setting']
                setting_key = setting_data['setting']
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                set_game_setting(setting_key, str(value))
                
                await update.message.reply_text(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "{setting_key}" —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {value}%')
                
                # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
                del context.user_data['waiting_for_game_setting']
            else:
                await update.message.reply_text('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
        except ValueError:
            await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
    
    elif 'waiting_for_event_message' in context.user_data and context.user_data['waiting_for_event_message']:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–≤–µ–Ω—Ç–∞
        event_message = update.message.text
        context.user_data['waiting_for_event_message'] = False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = get_all_user_ids()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        successful_sends = 0
        for user_id in user_ids:
            try:
                await context.bot.send_message(chat_id=user_id, text=f'üéâ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò:\n\n{event_message}')
                successful_sends += 1
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                pass
        
        await update.message.reply_text(f'–°–æ–æ–±—â–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_sends} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(user_ids)}')
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        del context.user_data['waiting_for_event_message']
    
    elif 'waiting_for_title_price' in context.user_data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–∏—Ç—É–ª–∞
        try:
            new_price = int(update.message.text)
            if new_price <= 0:
                await update.message.reply_text('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
                return
            
            title_data = context.user_data['waiting_for_title_price']
            title = title_data['title']
            is_permanent = title_data['is_permanent']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–∏—Ç—É–ª–∞
            if is_permanent:
                # –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤ –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å PERMANENT_TITLES
                from titles import PERMANENT_TITLES
                if title in PERMANENT_TITLES:
                    PERMANENT_TITLES[title] = new_price
                    await update.message.reply_text(f'–¶–µ–Ω–∞ —Ç–∏—Ç—É–ª–∞ "{title}" —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price} LumeCoin')
                else:
                    await update.message.reply_text('–¢–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            else:
                # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤ –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å TEMPORARY_TITLES
                from titles import TEMPORARY_TITLES
                if title in TEMPORARY_TITLES:
                    TEMPORARY_TITLES[title]['price'] = new_price
                    await update.message.reply_text(f'–¶–µ–Ω–∞ —Ç–∏—Ç—É–ª–∞ "{title}" —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price} LumeCoin')
                else:
                    await update.message.reply_text('–¢–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            del context.user_data['waiting_for_title_price']
            
        except ValueError:
            await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
    
    elif 'waiting_for_new_title_name' in context.user_data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏—Ç—É–ª–∞
        title_name = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not title_name:
            await update.message.reply_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
            return
        
        title_info = context.user_data['waiting_for_new_title_name']
        title_type = title_info['type']
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏—Ç—É–ª–∞
        await update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —Ç–∏—Ç—É–ª–∞ "{title_name}":')
        context.user_data['waiting_for_new_title_price'] = {'name': title_name, 'type': title_type}
    
    elif 'waiting_for_new_title_price' in context.user_data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –Ω–æ–≤–æ–≥–æ —Ç–∏—Ç—É–ª–∞
        try:
            price = int(update.message.text)
            if price <= 0:
                await update.message.reply_text('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
                return
            
            title_info = context.user_data['waiting_for_new_title_price']
            title_name = title_info['name']
            title_type = title_info['type']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏—Ç—É–ª
            if title_type == 'permanent':
                from titles import PERMANENT_TITLES
                PERMANENT_TITLES[title_name] = price
                await update.message.reply_text(f'–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ç–∏—Ç—É–ª "{title_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ü–µ–Ω–æ–π {price} LumeCoin')
            else:  # temporary
                from titles import TEMPORARY_TITLES
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞
                await update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—Ç—É–ª–∞ "{title_name}" –≤ –¥–Ω—è—Ö:')
                context.user_data['waiting_for_new_title_duration'] = {'name': title_name, 'price': price}
            
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
            del context.user_data['waiting_for_new_title_price']
            
        except ValueError:
            await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
    
    elif 'waiting_for_new_title_duration' in context.user_data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞
        try:
            duration = int(update.message.text)
            if duration <= 0:
                await update.message.reply_text('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
                return
            
            title_info = context.user_data['waiting_for_new_title_duration']
            title_name = title_info['name']
            price = title_info['price']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–∏—Ç—É–ª
            from titles import TEMPORARY_TITLES
            TEMPORARY_TITLES[title_name] = {'price': price, 'duration_days': duration}
            await update.message.reply_text(f'–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–∏—Ç—É–ª "{title_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ü–µ–Ω–æ–π {price} LumeCoin –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration} –¥–Ω–µ–π')
            
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            del context.user_data['waiting_for_new_title_duration']
            
        except ValueError:
            await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')


def register_admin_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    application.add_handler(CommandHandler('admin', admin_command))
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern='^admin_'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_input))