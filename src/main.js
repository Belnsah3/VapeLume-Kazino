// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tgUser = null;
let initData = null;

if (window.Telegram && window.Telegram.WebApp) {
  Telegram.WebApp.ready();
  Telegram.WebApp.expand();

  tgUser = Telegram.WebApp.initDataUnsafe.user;
  initData = Telegram.WebApp.initData;
  
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', tgUser);
}

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_BASE_URL = '/api'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const mainScreen = document.getElementById('main-screen');
const playScreen = document.getElementById('play-screen');
const profileScreen = document.getElementById('profile-screen');
const referralsScreen = document.getElementById('referrals-screen');
const titlesScreen = document.getElementById('titles-screen');
const bonusesScreen = document.getElementById('bonuses-screen');
const gameScreen = document.getElementById('game-screen');

// –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
const playBtn = document.getElementById('play-btn');
const profileBtn = document.getElementById('profile-btn');
const referralsBtn = document.getElementById('referrals-btn');
const titlesBtn = document.getElementById('titles-btn');
const bonusesBtn = document.getElementById('bonuses-btn');

// –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
const backToMainFromPlay = document.getElementById('back-to-main-from-play');
const backToMainFromProfile = document.getElementById('back-to-main-from-profile');
const backToMainFromReferrals = document.getElementById('back-to-main-from-referrals');
const backToMainFromTitles = document.getElementById('back-to-main-from-titles');
const backToMainFromBonuses = document.getElementById('back-to-main-from-bonuses');
const backToPlay = document.getElementById('back-to-play');

// –ò–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
const gameButtons = document.querySelectorAll('.game-btn');

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
  if (!initData) {
    console.error('Telegram WebApp initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return;
  }

  try {
    const response = await fetch(`${API_BASE_URL}/user`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ initData })
    });

    const data = await response.json();
    
    if (data.success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      document.getElementById('balance-amount').textContent = data.data.balance;
      document.getElementById('profile-balance').textContent = data.data.balance;
      document.getElementById('user-name').textContent = tgUser.first_name;
      document.getElementById('user-level').textContent = data.data.level;
      document.getElementById('user-rank').textContent = data.data.rank;
      document.getElementById('user-xp').textContent = data.data.xp;
      document.getElementById('xp-needed').textContent = data.data.xp_needed;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å XP
      const xpProgress = document.getElementById('xp-progress');
      const progressPercent = (data.data.xp / data.data.xp_needed) * 100;
      xpProgress.style.width = `${Math.min(progressPercent, 100)}%`;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      loadAchievements(data.data.achievements);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      loadReferralInfo(data.data.referral_link, data.data.referral_count);
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.message);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function loadAchievements(achievements) {
  const achievementsList = document.getElementById('achievements-list');
  achievementsList.innerHTML = '';
  
  achievements.forEach(achievement => {
    const achievementElement = document.createElement('div');
    achievementElement.className = 'achievement-item';
    achievementElement.title = achievement.name;
    achievementElement.textContent = achievement.icon || 'üèÜ';
    achievementsList.appendChild(achievementElement);
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function loadReferralInfo(referralLink, referralCount) {
  document.getElementById('referral-link').textContent = referralLink;
  document.getElementById('referral-count').textContent = referralCount;
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screen) {
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
  const screens = document.querySelectorAll('.screen');
  screens.forEach(s => s.classList.remove('active'));
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
  screen.classList.add('active');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
playBtn.addEventListener('click', () => {
  showScreen(playScreen);
});

profileBtn.addEventListener('click', () => {
  loadUserData();
  showScreen(profileScreen);
});

referralsBtn.addEventListener('click', () => {
  showScreen(referralsScreen);
});

titlesBtn.addEventListener('click', () => {
  showScreen(titlesScreen);
});

bonusesBtn.addEventListener('click', () => {
  showScreen(bonusesScreen);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
backToMainFromPlay.addEventListener('click', () => {
  showScreen(mainScreen);
});

backToMainFromProfile.addEventListener('click', () => {
  showScreen(mainScreen);
});

backToMainFromReferrals.addEventListener('click', () => {
  showScreen(mainScreen);
});

backToMainFromTitles.addEventListener('click', () => {
  showScreen(mainScreen);
});

backToMainFromBonuses.addEventListener('click', () => {
  showScreen(mainScreen);
});

backToPlay.addEventListener('click', () => {
  showScreen(playScreen);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
gameButtons.forEach(button => {
  button.addEventListener('click', () => {
    const gameType = button.getAttribute('data-game');
    openGameScreen(gameType);
  });
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
function openGameScreen(gameType) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã
  document.getElementById('game-title').textContent = getGameTitle(gameType);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
  showScreen(gameScreen);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"
  document.getElementById('play-game-btn').onclick = () => playGame(gameType);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã
function getGameTitle(gameType) {
  const gameTitles = {
    'roulette': '–†—É–ª–µ—Ç–∫–∞',
    'play': '–ö–æ—Å—Ç–∏',
    'russian': '–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
    'jewish': '–ï–≤—Ä–µ–π—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
    'dice': '–ö—É–±–∏–∫',
    'slots': '–°–ª–æ—Ç—ã'
  };
  
  return gameTitles[gameType] || '–ò–≥—Ä–∞';
}

// –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
async function playGame(gameType) {
  const betInput = document.getElementById('bet-amount');
  const betAmount = parseInt(betInput.value);
  
  if (!betAmount || betAmount <= 0) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É');
    return;
  }
  
  if (!initData) {
    console.error('Telegram WebApp initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  try {
    const response = await fetch(`${API_BASE_URL}/game/${gameType}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        initData,
        bet: betAmount
      })
    });
    
    const result = await response.json();
    
    const gameResultElement = document.getElementById('game-result');
    
    if (result.success) {
      gameResultElement.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${result.winnings} LumeCoin!`;
      gameResultElement.style.color = '#2ecc71'; // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
      document.getElementById('balance-amount').textContent = result.new_balance;
    } else {
      gameResultElement.textContent = result.message || '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏';
      gameResultElement.style.color = '#e74c3c'; // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ:', error);
    document.getElementById('game-result').textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞';
  }
}

// –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
document.getElementById('refresh-profile').addEventListener('click', loadUserData);

// –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
document.getElementById('copy-referral-link').addEventListener('click', () => {
  const referralLink = document.getElementById('referral-link').textContent;
  
  navigator.clipboard.writeText(referralLink)
    .then(() => {
      alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    })
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', err);
    });
});

// –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" —Ä–µ—Ñ–µ—Ä–∞–ª–∫–æ–π
document.getElementById('share-referral').addEventListener('click', () => {
  const referralLink = document.getElementById('referral-link').textContent;
  
  if (navigator.share) {
    navigator.share({
      title: 'VapeLume Kazino',
      text: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ VapeLume Kazino!',
      url: referralLink
    })
    .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error));
  } else {
    // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    navigator.clipboard.writeText(referralLink)
      .then(() => {
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', err);
      });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏/–∞—Ä–µ–Ω–¥—ã —Ç–∏—Ç—É–ª–æ–≤
document.querySelectorAll('.buy-btn, .rent-btn').forEach(button => {
 button.addEventListener('click', async (e) => {
    const titleItem = e.target.closest('.title-item');
    const title = titleItem.getAttribute('data-title');
    const price = titleItem.getAttribute('data-price');
    const type = titleItem.getAttribute('data-type');
    
    if (!initData) {
      console.error('Telegram WebApp initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      return;
    }
    
    try {
      const response = await fetch(`${API_BASE_URL}/title/buy`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          initData,
          title,
          type
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        alert(`üéâ –í—ã ${type === 'permanent' ? '–∫—É–ø–∏–ª–∏' : '–∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏'} —Ç–∏—Ç—É–ª "${title}"!`);
        loadUserData(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      } else {
        alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–∏—Ç—É–ª–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–∏—Ç—É–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞');
    }
  });
});

// –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
document.getElementById('open-case-btn').addEventListener('click', async () => {
  if (!initData) {
    console.error('Telegram WebApp initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  try {
    const response = await fetch(`${API_BASE_URL}/case/open`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ initData })
    });
    
    const result = await response.json();
    
    if (result.success) {
      alert(`üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${result.reward} LumeCoin!`);
      loadUserData(); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    } else {
      alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞');
  }
});

// –ö–Ω–æ–ø–∫–∞ —Å–∂–∏–≥–∞–Ω–∏—è –º–æ–Ω–µ—Ç
document.getElementById('burn-coins-btn').addEventListener('click', async () => {
  const burnAmountInput = document.getElementById('burn-amount');
  const burnAmount = parseInt(burnAmountInput.value);
  
  if (!burnAmount || burnAmount <= 0) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    return;
  }
  
  if (!initData) {
    console.error('Telegram WebApp initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  try {
    const response = await fetch(`${API_BASE_URL}/burn`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        initData,
        amount: burnAmount
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      alert(`üî• –í—ã —Å–æ–∂–≥–ª–∏ ${burnAmount} –º–æ–Ω–µ—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ ${result.xp_gained} XP!`);
      loadUserData(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } else {
      alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∏–≥–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∏–≥–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞');
  }
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('load', () => {
  if (tgUser) {
    loadUserData();
  } else {
    console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ Telegram WebApp');
  }
});
