import random
import asyncio
from telegram import Update
from telegram.ext import ContextTypes, Application
from database import get_user_balance, update_user_balance, get_game_setting

def group_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ.
    """
    from functools import wraps
    @wraps(func)
    async def wrapper(update, context):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from database import get_bound_supergroup_id
        
        chat_id = update.effective_chat.id
        bound_supergroup_id = get_bound_supergroup_id()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç - —ç—Ç–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
        if update.effective_chat.type not in ['group', 'supergroup'] or chat_id != bound_supergroup_id:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
        
        return await func(update, context)
    return wrapper


async def delete_message_after_delay(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, delay: int):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    """
    await asyncio.sleep(delay)
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass  # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ


@group_only
async def roulette(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É
    /roulette [—Å—Ç–∞–≤–∫–∞]
    –°—Ç–∞–≤–∫–∞ ‚â• 25 LumeCoin.
    30% —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à (x2), –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø—Ä–æ–∏–≥—Ä—ã—à.
    –ê–Ω–∏–º–∞—Ü–∏—è: üé∞ ‚Üí üî¥/‚ö´Ô∏è/üü¢ ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args or len(context.args) != 1:
        message = await update.message.reply_text('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É: /roulette <—Å—Ç–∞–≤–∫–∞>')
        context.application.job_queue.run_once(
            lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
            when=300
        )
        return
    
    try:
        bet = float(context.args[0])
        if bet < 25:
            message = await update.message.reply_text('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 25 LumeCoin')
            context.application.job_queue.run_once(
                lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
                when=300
            )
            return
    except ValueError:
        message = await update.message.reply_text('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: /roulette <—Å—Ç–∞–≤–∫–∞>')
        context.application.job_queue.run_once(
            lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
            when=300
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = get_user_balance(user_id)
    if balance < bet:
        message = await update.message.reply_text(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.1f} LumeCoin')
        context.application.job_queue.run_once(
            lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
            when=300
        )
        return
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_balance(user_id, -bet)
    
    # –ê–Ω–∏–º–∞—Ü–∏—è: üé∞
    msg = await update.message.reply_text('üé∞')
    await asyncio.sleep(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = random.choices(['win', 'lose'], weights=[30, 70])[0]
    
    if result == 'win':
        # –í—ã–∏–≥—Ä—ã—à (x2)
        win_amount = bet * 2
        update_user_balance(user_id, win_amount)
        # –ê–Ω–∏–º–∞—Ü–∏—è: üî¥/‚ö´Ô∏è/üü¢ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞)
        color = random.choice(['üî¥', '‚ö´Ô∏è', 'üü¢'])
        await msg.edit_text(f'{color}')
        await asyncio.sleep(1)
        await msg.edit_text(f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} LumeCoin!')
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        # –ê–Ω–∏–º–∞—Ü–∏—è: üî¥/‚ö´Ô∏è/üü¢ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞)
        color = random.choice(['üî¥', '‚ö´Ô∏è', 'üü¢'])
        await msg.edit_text(f'{color}')
        await asyncio.sleep(1)
        await msg.edit_text(f'üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet:.1f} LumeCoin.')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_balance = get_user_balance(user_id)
    final_msg = await update.message.reply_text(f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:.1f} LumeCoin')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, update.message.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, msg.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, final_msg.id, 300),
        when=300
    )


@group_only
async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
    /play
    –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 25 LumeCoin.
    40% —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å 40 LumeCoin.
    –ê–Ω–∏–º–∞—Ü–∏—è: üé≤ ‚Üí ... ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    user_id = update.effective_user.id
    bet = 25
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = get_user_balance(user_id)
    if balance < bet:
        message = await update.message.reply_text(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.1f} LumeCoin')
        context.application.job_queue.run_once(
            lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
            when=300
        )
        return
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_balance(user_id, -bet)
    
    # –ê–Ω–∏–º–∞—Ü–∏—è: üé≤
    msg = await update.message.reply_text('üé≤')
    await asyncio.sleep(2)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = random.choices(['win', 'lose'], weights=[40, 60])[0]
    
    if result == 'win':
        # –í—ã–∏–≥—Ä—ã—à 40 LumeCoin
        win_amount = 40
        update_user_balance(user_id, win_amount)
        await msg.edit_text(f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} LumeCoin!')
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        await msg.edit_text(f'üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet:.1f} LumeCoin.')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_balance = get_user_balance(user_id)
    final_msg = await update.message.reply_text(f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:.1f} LumeCoin')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, update.message.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, msg.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, final_msg.id, 300),
        when=300
    )


@group_only
async def russian(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
    /russian
    –ë–µ—Å–ø–ª–∞—Ç–Ω–æ.
    65% —à–∞–Ω—Å: –º—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç (context.bot.restrict_chat_member).
    35% —à–∞–Ω—Å: –≤—ã–∏–≥—Ä—ã—à 35 LumeCoin.
    –ê–Ω–∏–º–∞—Ü–∏—è: üî´ ‚Üí ... ‚Üí üí•/üí∞.
    """
    user_id = update.effective_user.id
    
    # –ê–Ω–∏–º–∞—Ü–∏—è: üî´
    msg = await update.message.reply_text('üî´')
    await asyncio.sleep(2)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = random.choices(['lose', 'win'], weights=[65, 35])[0]
    
    if result == 'lose':
        # –ú—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
        from datetime import datetime, timedelta
        mute_until = datetime.now() + timedelta(minutes=5)
        try:
            await context.bot.restrict_chat_member(
                chat_id=update.effective_chat.id,
                user_id=user_id,
                permissions=context.bot.get_chat(update.effective_chat.id).permissions,
                until_date=mute_until
            )
            await msg.edit_text(f'üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ú—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç.')
        except Exception:
            await msg.edit_text(f'üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! (–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –º—É—Ç)')
    else:
        # –í—ã–∏–≥—Ä—ã—à 35 LumeCoin
        win_amount = 35
        update_user_balance(user_id, win_amount)
        await msg.edit_text(f'üí∞ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} LumeCoin!')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_balance = get_user_balance(user_id)
    final_msg = await update.message.reply_text(f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:.1f} LumeCoin')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, update.message.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, msg.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, final_msg.id, 300),
        when=300
    )


@group_only
async def jewish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ï–≤—Ä–µ–π—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
    /jewish
    –ë–µ—Å–ø–ª–∞—Ç–Ω–æ.
    50% —à–∞–Ω—Å: –ø—Ä–æ–∏–≥—Ä—ã—à 35 LumeCoin.
    50% —à–∞–Ω—Å: –≤—ã–∏–≥—Ä—ã—à 25 LumeCoin.
    –ê–Ω–∏–º–∞—Ü–∏—è: ‚ú°Ô∏è ‚Üí ... ‚Üí üí∏/ü§ë.
    """
    user_id = update.effective_user.id
    
    # –ê–Ω–∏–º–∞—Ü–∏—è: ‚ú°Ô∏è
    msg = await update.message.reply_text('‚ú°Ô∏è')
    await asyncio.sleep(2)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = random.choices(['lose', 'win'], weights=[50, 50])[0]
    
    if result == 'lose':
        # –ü—Ä–æ–∏–≥—Ä—ã—à 35 LumeCoin
        loss_amount = 35
        balance = get_user_balance(user_id)
        if balance >= loss_amount:
            update_user_balance(user_id, -loss_amount)
            await msg.edit_text(f'üí∏ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {loss_amount:.1f} LumeCoin.')
        else:
            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –≤—Å—é —Å—É–º–º—É
            update_user_balance(user_id, -balance)
            await msg.edit_text(f'üí∏ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {balance:.1f} LumeCoin.')
    else:
        # –í—ã–∏–≥—Ä—ã—à 25 LumeCoin
        win_amount = 25
        update_user_balance(user_id, win_amount)
        await msg.edit_text(f'ü§ë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} LumeCoin!')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_balance = get_user_balance(user_id)
    final_msg = await update.message.reply_text(f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:.1f} LumeCoin')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, update.message.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, msg.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, final_msg.id, 300),
        when=300
    )


@group_only
async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ —Å Telegram-–∞–Ω–∏–º–∞—Ü–∏–µ–π
    /dice [—Å—Ç–∞–≤–∫–∞]
    –°—Ç–∞–≤–∫–∞ –æ—Ç 10 –¥–æ 100 LumeCoin.
    –ò–≥—Ä–æ–∫ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫ (context.bot.send_dice).
    –ï—Å–ª–∏ –≤—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ ‚â• 4, –≤—ã–∏–≥—Ä—ã—à x1.5.
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args or len(context.args) != 1:
        message = await update.message.reply_text('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É: /dice <—Å—Ç–∞–≤–∫–∞>')
        context.application.job_queue.run_once(
            lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
            when=300
        )
        return
    
    try:
        bet = float(context.args[0])
        if bet < 10 or bet > 100:
            message = await update.message.reply_text('‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 LumeCoin')
            context.application.job_queue.run_once(
                lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
                when=300
            )
            return
    except ValueError:
        message = await update.message.reply_text('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: /dice <—Å—Ç–∞–≤–∫–∞>')
        context.application.job_queue.run_once(
            lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
            when=300
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = get_user_balance(user_id)
    if balance < bet:
        message = await update.message.reply_text(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.1f} LumeCoin')
        context.application.job_queue.run_once(
            lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
            when=300
        )
        return
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_balance(user_id, -bet)
    
    # –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫
    dice_msg = await context.bot.send_dice(chat_id=update.effective_chat.id, message_thread_id=update.message.message_thread_id if update.message.is_topic_message else None)
    dice_value = dice_msg.dice.value
    
    await asyncio.sleep(3)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—É–±–∏–∫–∞
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if dice_value >= 4:
        # –í—ã–∏–≥—Ä—ã—à x1.5
        win_amount = bet * 1.5
        update_user_balance(user_id, win_amount)
        result_msg = await update.message.reply_text(f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} LumeCoin!')
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        result_msg = await update.message.reply_text(f'üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet:.1f} LumeCoin.')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_balance = get_user_balance(user_id)
    final_msg = await update.message.reply_text(f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:.1f} LumeCoin')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, update.message.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, dice_msg.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, result_msg.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, final_msg.id, 300),
        when=300
    )


@group_only
async def slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã
    /slots
    –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 50 LumeCoin.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç context.bot.send_dice(emoji="üé∞").
    –õ–æ–≥–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ dice.value (–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 64). 
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è 3 –∏ 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.
    3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: –≤—ã–∏–≥—Ä—ã—à x5.
    2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: –≤—ã–∏–≥—Ä—ã—à x2.
    """
    user_id = update.effective_user.id
    bet = 50
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = get_user_balance(user_id)
    if balance < bet:
        message = await update.message.reply_text(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.1f} LumeCoin')
        context.application.job_queue.run_once(
            lambda _: delete_message_after_delay(context, update.effective_chat.id, message.id, 300),
            when=300
        )
        return
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    update_user_balance(user_id, -bet)
    
    # –ë—Ä–æ—Å–∞–µ–º —Å–ª–æ—Ç—ã
    dice_msg = await context.bot.send_dice(chat_id=update.effective_chat.id, emoji="üé∞", message_thread_id=update.message.message_thread_id if update.message.is_topic_message else None)
    dice_value = dice_msg.dice.value
    
    await asyncio.sleep(3)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–∞
    # –í Telegram —Å–ª–æ—Ç–∞—Ö –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 64:
    # 1 - 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (—è–∫–æ–±—ã –¥–∂–µ–∫–ø–æ—Ç)
    # 2-7 - 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    # 8-64 - –ø—Ä–æ–∏–≥—Ä—ã—à
    
    if dice_value == 1:
        # –î–∂–µ–∫–ø–æ—Ç - 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        win_amount = bet * 5
        update_user_balance(user_id, win_amount)
        result_msg = await update.message.reply_text(f'üé∞üéâ –î–∂–µ–∫–ø–æ—Ç! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} LumeCoin!')
    elif 2 <= dice_value <= 7:
        # 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        win_amount = bet * 2
        update_user_balance(user_id, win_amount)
        result_msg = await update.message.reply_text(f'üé∞üí∞ 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.1f} LumeCoin!')
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        result_msg = await update.message.reply_text(f'üé∞üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet:.1f} LumeCoin.')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_balance = get_user_balance(user_id)
    final_msg = await update.message.reply_text(f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:.1f} LumeCoin')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, update.message.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, dice_msg.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, result_msg.id, 300),
        when=300
    )
    context.application.job_queue.run_once(
        lambda _: delete_message_after_delay(context, update.effective_chat.id, final_msg.id, 300),
        when=300
    )